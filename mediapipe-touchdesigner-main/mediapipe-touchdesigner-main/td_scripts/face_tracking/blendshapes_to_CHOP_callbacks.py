# me - this DAT
# scriptOp - the OP which is cooking

import json
import numpy as np

# press 'Setup Parameters' in the OP to call this function to re-create the parameters.

# called whenever custom pulse parameter is pushed
def onPulse(par):
	return

def onCook(scriptOp):
	scriptOp.clear()
	scriptOp.numSamples = 0
	# scriptOp.appendChan('x')
	# scriptOp.appendChan('y')
	# scriptOp.appendChan('z')
	if(op('in1').text != "" and parent().parent().par.Blendshapes == True):
		rawdata = json.loads(op('in1').text)
			
		# digits = scriptOp.parent().digits -1
		# print("digits: " +str(digits))
		# print(str(len(rawdata['faceResults']['faceLandmarks'])))
		if not len(rawdata):
			return
		# Check to see if we have a face
		if(len(rawdata['faceLandmarkResults']) > 0 and rawdata['faceLandmarkResults']['faceBlendshapes']):
			scriptOp.numSamples = len(rawdata['faceLandmarkResults']['faceBlendshapes'])
			i = 0
			# Iterate through each detected face
			for blendshapes in rawdata['faceLandmarkResults']['faceBlendshapes']:
				for categories in blendshapes["categories"]:
					# First time around, let's make the channels
					if (i == 0):
						scriptOp.appendChan(categories["categoryName"])
					scriptOp[categories["categoryName"]][i] = categories['score']
				i += 1
			return

	# No faces detected, so make a 0 filled CHOP
	# print("no BlendShapes")
	scriptOp.copyNumpyArray(np.zeros((52,1),np.float32))
	return

def onSetupParameters(scriptOp):
	"""Auto-generated by Component Editor"""
	# manual changes to anything other than parJSON will be	# destroyed by Comp Editor unless doc string above is	# changed

	TDJSON = op.TDModules.mod.TDJSON
	parJSON = """
	{}
	"""
	parData = TDJSON.textToJSON(parJSON)
	TDJSON.addParametersFromJSONOp(scriptOp, parData, destroyOthers=True)